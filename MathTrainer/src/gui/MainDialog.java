/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;


import com.zetcode.snake.Snake;
import com.zetcode.tetris.Tetris;
import data.MathOps;
import data.MinusOp;
import data.PlusOp;
import java.awt.EventQueue;
import java.util.List;
import java.util.ListIterator;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import settings.UserSets;


/**
 *
 * @author stephan_wink
 */
public class MainDialog extends javax.swing.JFrame {
    
    private MathOps test;
    private List<UserSets> user;
    private final static Logger log = LogManager.getLogger(MainDialog.class);


    /**
     * Creates new form MqttStarter
     */
    public MainDialog() {

        this.user = UserSets.LoadUserSettingsFromFile();
        initComponents();
        this.setTitle("Mathe Trainer");
        
        this.users_jcb.setSelectedIndex(0);
        this.users_jcb.removeAllItems();
        ListIterator<UserSets> iter = this.user.listIterator();
        while(iter.hasNext())
        {
            this.users_jcb.addItem(iter.next().getUserName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        log_jta = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        minus_jb = new javax.swing.JButton();
        plus_jb = new javax.swing.JButton();
        mul_jb = new javax.swing.JButton();
        div_jb = new javax.swing.JButton();
        formula_jtf = new javax.swing.JTextField();
        result_jtf = new javax.swing.JTextField();
        next_jb = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        users_jcb = new javax.swing.JComboBox<>();
        setup_jb = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        log_jta.setBackground(new java.awt.Color(102, 102, 102));
        log_jta.setColumns(20);
        log_jta.setForeground(new java.awt.Color(255, 255, 255));
        log_jta.setRows(5);
        jScrollPane1.setViewportView(log_jta);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/wshield.png"))); // NOI18N

        jPanel1.setLayout(new java.awt.GridLayout(2, 2));

        minus_jb.setFont(new java.awt.Font("Arial Black", 0, 36)); // NOI18N
        minus_jb.setText("-");
        minus_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minus_jbActionPerformed(evt);
            }
        });
        jPanel1.add(minus_jb);

        plus_jb.setFont(new java.awt.Font("Arial Black", 0, 36)); // NOI18N
        plus_jb.setText("+");
        plus_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plus_jbActionPerformed(evt);
            }
        });
        jPanel1.add(plus_jb);

        mul_jb.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        mul_jb.setText("*");
        mul_jb.setEnabled(false);
        mul_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mul_jbActionPerformed(evt);
            }
        });
        jPanel1.add(mul_jb);

        div_jb.setFont(new java.awt.Font("Arial Black", 1, 48)); // NOI18N
        div_jb.setText("/");
        div_jb.setEnabled(false);
        div_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                div_jbActionPerformed(evt);
            }
        });
        jPanel1.add(div_jb);

        formula_jtf.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        formula_jtf.setText("XX + YY =");
        formula_jtf.setEnabled(false);

        result_jtf.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        result_jtf.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        result_jtf.setText("ZZZ");
        result_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                result_jtfKeyPressed(evt);
            }
        });

        next_jb.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        next_jb.setText(">");
        next_jb.setEnabled(false);
        next_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                next_jbActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout());

        jLabel2.setText("Spieler:");
        jPanel2.add(jLabel2);

        users_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(users_jcb);

        setup_jb.setText("setup");
        setup_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setup_jbActionPerformed(evt);
            }
        });
        jPanel2.add(setup_jb);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(formula_jtf, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(result_jtf, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(next_jb, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formula_jtf, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(next_jb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(result_jtf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void minus_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minus_jbActionPerformed
        log.trace("button minus pressed");
        UserSets local = this.user.get(this.users_jcb.getSelectedIndex());
        test = new MinusOp(local.getTests(), local.getFailures(), 
                            local.getSubstractionTestSet());
        startChallange("minus Test gestartet\n");
    }//GEN-LAST:event_minus_jbActionPerformed

    private void plus_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plus_jbActionPerformed
        log.trace("button plus pressed");
        UserSets local = this.user.get(this.users_jcb.getSelectedIndex());
        test = new PlusOp(local.getTests(), local.getFailures(), 
                            local.getSubstractionTestSet());
        startChallange("plus Test gestartet\n");
    }//GEN-LAST:event_plus_jbActionPerformed

    private void mul_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mul_jbActionPerformed
        log.trace("button mul pressed");
        this.log_jta.append("mal challange gestartet\n");
    }//GEN-LAST:event_mul_jbActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        log.trace("window closing event");
    }//GEN-LAST:event_formWindowClosing

    private void div_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_div_jbActionPerformed
        log.trace("button div pressed");
        this.log_jta.append("teilen challange gestartet\n");
    }//GEN-LAST:event_div_jbActionPerformed

    private void next_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_next_jbActionPerformed
        log.trace("button next pressed");
        AnalyzeUserInput();
        
    }//GEN-LAST:event_next_jbActionPerformed

    private void result_jtfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_result_jtfKeyPressed
        if(10 == evt.getKeyCode())
        {
            log.trace("user pressed enter");
            AnalyzeUserInput();
        }
    }//GEN-LAST:event_result_jtfKeyPressed

    private void setup_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setup_jbActionPerformed
        log.trace("entering setup dialog");
        UserSettings userSetDialog = new UserSettings(this, true);
        userSetDialog.setUserSettings(this.user, this.users_jcb.getSelectedIndex());
        userSetDialog.setVisible(true);
        if(UserSettings.OK == userSetDialog.GetDialogResult())
        {
            this.user = userSetDialog.getUserSettings();
            log.trace("user data updated");
        }
    }//GEN-LAST:event_setup_jbActionPerformed


    public void Start()
    {
        log.trace("start request");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainDialog.this.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton div_jb;
    private javax.swing.JTextField formula_jtf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea log_jta;
    private javax.swing.JButton minus_jb;
    private javax.swing.JButton mul_jb;
    private javax.swing.JButton next_jb;
    private javax.swing.JButton plus_jb;
    private javax.swing.JTextField result_jtf;
    private javax.swing.JButton setup_jb;
    private javax.swing.JComboBox<String> users_jcb;
    // End of variables declaration//GEN-END:variables

    private void enableTestStarts(boolean enable) {
        this.minus_jb.setEnabled(enable);
        this.plus_jb.setEnabled(enable);
        this.users_jcb.setEnabled(enable);
        this.setup_jb.setEnabled(enable);
        //this.mul_jb.setEnabled(enable);
        //this.div_jb.setEnabled(enable);
        
    }

    private void startTheGame() 
    {
        switch (this.user.get(this.users_jcb.getSelectedIndex()).getIndexToGameLookup()) 
        {
            case 0:
                log.trace("start the game: Snake");
                EventQueue.invokeLater(() -> {
                    JFrame ex = new Snake();
                    ex.setVisible(true);
                });     break;
            case 1:
                log.trace("start the game: Tetris");
                EventQueue.invokeLater(() -> {
                    JFrame ex = new Tetris();
                    ex.setVisible(true);
                });     break;
            default:
                log.trace("start the default game: Snake");
                EventQueue.invokeLater(() -> {
                    JFrame ex = new Snake();
                    ex.setVisible(true);
                });     break;
        }
    }

    private void startChallange(String log) {
        
        if(null != test)
        {
            this.log_jta.append(log);
            enableTestStarts(false);
            this.next_jb.setEnabled(true);
            this.test.calculateNextTest();
            this.formula_jtf.setText(test.getOperation());
            this.result_jtf.setText("");
        }
    }
    
    public static boolean isNumeric(String strNum) 
    {
        try {
            int i = Integer.parseInt(strNum);
        } catch (NumberFormatException | NullPointerException nfe) {
            return false;
        }
        return true;
    }

    private void AnalyzeUserInput() 
    {
        if(null != this.test)
        {
            if(isNumeric(this.result_jtf.getText()))
            {
                int result = Integer.parseInt(this.result_jtf.getText());
                String textCommon = this.test.getActualTests() + "/" 
                                        + this.test.getTests()
                                        + ": " + this.formula_jtf.getText() 
                                        + this.result_jtf.getText();
                if(this.test.validateResult(result))
                {
                    textCommon += " R\n";
                }
                else
                {
                    textCommon += " F\n";
                }
                this.log_jta.append(textCommon);
                log.trace(textCommon);
            
                if(this.test.isTestCycleCompleted())
                {
                    this.next_jb.setEnabled(false);
                    enableTestStarts(true);
                    if(this.test.isTestCyclePassed())
                    {
                        JOptionPane.showMessageDialog(MainDialog.this, "Gut gemacht!\n "
                            + "Dafür gibt es jetzt zur Belohnung ein Spiel.\n "
                            + "Mach dich bereit!");
                        startTheGame();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(MainDialog.this, "Schade!\n "
                            + "Du hast leider zu viele Fehler gemacht..\n "
                            + "Versuche es gleich noch einmal.");   
                    }
                    this.formula_jtf.setText("");
                    this.result_jtf.setText("");
                    log.trace("test completed");
                }
                else
                {
                    this.test.calculateNextTest();
                    this.formula_jtf.setText(this.test.getOperation());
                    this.result_jtf.setText("");
                    this.next_jb.setEnabled(true);
                    this.result_jtf.requestFocus();
                }
            }
            else
            {
                this.log_jta.append(" Das war keine Zahl, versuche es noch einmal!\n");
                log.trace("non decimal entry detected");
            }
        }
    }
    
    class DataCollector extends SwingWorker<Long, Object>
    {

        @Override
        protected Long doInBackground() throws Exception 
        {
            try 
            { 
                Thread.sleep(30000);
            } catch ( InterruptedException e ) { }
            new DataCollector().execute();
            return (0L);
        }
        
        @Override protected void done()
        {
            //TODO
        }
    }
}
